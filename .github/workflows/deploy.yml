name: deploy
concurrency: production

on:
  push:
    branches: [ production ]
  workflow_dispatch:

jobs:
  release-api:
    runs-on: ubuntu-latest
    permissions: write-all
    name: 'production: release - api'

    outputs:
      IMAGE_RELEASE_TAG: ${{ steps.create-release.outputs.IMAGE_RELEASE_TAG }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: production

      - name: 'create tag and release'
        if: success()
        uses: actions/github-script@v7
        id: create-release
        with:
          script: |
            const { owner, repo } = context.repo
            
            // Generate tag name
            let lastestTagName = undefined;
            try {
              const response = await github.rest.repos.getLatestRelease({
                owner,
                repo
              })
              lastestTagName = response?.data?.tag_name
            } catch (e) {
            }
            
            const date = new Date()
            const currentMonth = (date.getMonth() + 1)
            let tagName = `${date.getFullYear()}.${currentMonth}.1`
            if (lastestTagName != undefined) {
              [year, month, increment] = lastestTagName.split(".")
              if (date.getFullYear() == year && currentMonth == month) {
                increment = (parseInt(increment) + 1)
                tagName = `${date.getFullYear()}.${currentMonth}.${increment}`
              }
            }
            
            // Create a tag
            await github.rest.git.createTag({
              owner,
              repo,
              tag: tagName,
              message: tagName,
              object: context.sha,
              type: 'commit',
              tagger: {
                  name: 'Release Pipeline',
                  email: 'bot@adapttive.com'
              }
            })
            
            // Create a reference for tag
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            })
            
            console.log(`Release created with tag name: %c${tagName}`, 'color: green');
            
            // Generate Release Notes
            const request = {
              owner,
              repo,
              tag_name: tagName,
              target_commitish: 'production'
            }
            
            if (lastestTagName != undefined) {
              request['previous_tag_name'] = lastestTagName
            }
            
            const releaseNotes = await github.rest.repos.generateReleaseNotes(request)
            let body = releaseNotes?.data?.body != undefined ? releaseNotes.data.body : ""
            
            const addCommits = false;
            if (lastestTagName != undefined && addCommits) {
              let result = '';
              const options = {};
              options.listeners = {
                stdout: (data) => {
                  result += data.toString();
                }
              };
            
              await exec.exec(`git fetch origin`);
              await exec.exec(`git fetch --tags`);
              await exec.exec(`git log --no-merges --pretty=format:"- %h %s" ${lastestTagName}...${tagName}`, [], options);
              body = body + "\n" + result
            }
            
            // Get owner and repo from context of payload that triggered the action
            const draft = false;
            const prerelease = false;
            
            // Create a release
            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: tagName,
              body,
              draft,
              prerelease
            });
            
            core.exportVariable('IMAGE_RELEASE_TAG', tagName)
            core.setOutput('IMAGE_RELEASE_TAG', tagName)

  build-api:
    runs-on: ubuntu-latest
    name: 'production: build - api'
    needs: release-api

    env:
      PROJECT_ID: "milindsingh"
      IMAGE_RELEASE_TAG: ${{needs.release-api.outputs.IMAGE_RELEASE_TAG}}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.IMAGE_RELEASE_TAG}}

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.PRODUCTION_GCP_CREDENTIALS }}'

      - name: 'set up cloud sdk'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 462.0.0'

      - name: 'use gcloud cli'
        run: 'gcloud info'

      # format: us-central1-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$IMAGE_NAME:$IMAGE_RELEASE_TAG
      - name: 'build docker image'
        run: |-
          # Build docker image
          docker build \
          -t asia-south2-docker.pkg.dev/milindsingh/docker-meetup/node-api:$IMAGE_RELEASE_TAG .

      - run: |
          gcloud auth configure-docker asia-south2-docker.pkg.dev

      - name: 'push docker image'
        run: |-
          docker push asia-south2-docker.pkg.dev/milindsingh/docker-meetup/node-api:$IMAGE_RELEASE_TAG

  deploy-api:
    runs-on: ubuntu-latest
    name: 'production: deploy - api'
    needs:
      - release-api
      - build-api

    env:
      PROJECT_ID: "milindsingh"
      IMAGE_RELEASE_TAG: ${{needs.release-api.outputs.IMAGE_RELEASE_TAG}}

    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.PRODUCTION_GCP_CREDENTIALS }}'

      - name: 'set up cloud sdk'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 462.0.0'

      - name: 'use gcloud cli'
        run: 'gcloud info'

      - name: 'deploy image to cloud-run'
        run: |-
          CLOUDSDK_CORE_DISABLE_PROMPTS=1
          gcloud run deploy node-api --image asia-south2-docker.pkg.dev/milindsingh/docker-meetup/node-api:$IMAGE_RELEASE_TAG
